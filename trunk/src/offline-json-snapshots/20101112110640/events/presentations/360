{"tags":[{"name":"scala"},{"name":"multicore"},{"name":"collections"}],"summary":"Multicore processors are on every desk now. How are we going to make use of the extra power they provide? Some think that actors or transactional memory will save the day by making concurrent programming easier and safer. Even though these are welcome, I am skeptical about their ultimate success. Concurrency is fundamentally hard and no dressing up will be able to hide that fact completely.\n\nA safer and for the programmer much simpler alternative is to treat parallel execution as essentially an optimization. A promising application area are collections. Programing by transforming and aggregating collections is simple, powerful, and can optimized by executing bulk operations in parallel. To be able to do this in practice, any side effects of parallel operations need to be carefully controlled. This means that immutable, persistent collections are more suitable than mutable ones.\n\nIn this talk I will describe the new Scala collections framework, and show how it allows a seamless migration from traditional mutable collections to persistent collections, and from there to parallel collections. I show how the same vocabulary of methods can be used for either type of collection, and how one can have parallel as well as sequential views on the same underlying collection.","id":360,"speakerUri":"http://cfp.devoxx.com/rest/v1/events/speakers/304","title":"Future-proofing collections: from mutable to persistent to parallel","speaker":"Martin Odersky","track":"New Languages on the JVM","experience":"SENIOR","speakers":[{"speakerUri":"http://cfp.devoxx.com/rest/v1/events/speakers/304","speaker":"Martin Odersky"}],"type":"Conference (1h)"}